@using System.Runtime.InteropServices.ComTypes
@using Microsoft.AspNetCore.Mvc.Localization

@model Toz.Dotnet.Models.Pet
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = @Localizer["PageTitle"];
}

<style>
    #image-cropper {
        width: 250px;
        height: 350px;
        margin: 0 auto;
    }

    .cropit-preview {
        /* You can specify preview size in CSS */
        width: 250px;
        height: 250px;
        border: 1px solid black;
    }

    #file {
        display: none;
    }

    .custom-file-upload {
        border: 1px solid #ccc;
        display: inline-block;
        padding: 6px 12px;
        cursor: pointer;
    }
</style>

<link rel="stylesheet" href="~/lib/fine-uploader/dist/fine-uploader-new.min.css">
<link rel="stylesheet" href="~/lib/fine-uploader/dist/fine-uploader-gallery.min.css">

<div class="container-fluid center">

    <fieldset class="pagetitle">
        <legend class="pagetitlelegend">@Localizer["PageTitle"]</legend>

        <ul class="nav nav-tabs" id="tabContent">
            <li class="active"><a href="#avatar" data-toggle="tab">@Localizer["Avatar"]</a></li>
            <li><a href="#gallery" data-toggle="tab">@Localizer["Gallery"]</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="avatar">
                <form class="form-horizontal" asp-controller="Pets" asp-action="Avatar" method="POST" enctype="multipart/form-data">
                    <br />

                    <div id="image-cropper">
                        <div class="cropit-preview">
                            <div class="cropit-preview-background-container">
                                <img class="cropit-preview-background" />
                            </div>
                            <div class="cropit-preview-image-container">
                                <img class="cropit-preview-image" />
                            </div>
                        </div>
                        <br />
                        <input type="range" class="cropit-image-zoom-input" />

                        <br />

                        <label for="file" class=" btn btn-block btn-default">
                            <i class="glyphicon glyphicon-upload"></i> @Localizer["Browse"]
                        </label>
                        <input type="file" name="file" id="file" class="cropit-image-input" accept="image/*" />
                        <input type="hidden" name="image-data" class="hidden-image-data" />

                    </div>
                    <input type="button" class="btn btn-warning btn-block" id="Cancel" data-dismiss="modal" value=@Localizer["Cancel"]>
                    <input type="button" class="btn btn-primary btn-block" id="SaveAvatar" value=@Localizer["Save"]>
                </form>
            </div>

            <div class="tab-pane" id="gallery">
                <br />

                <div id="fine-uploader-gallery"></div>
                <br />
                <input type="button" class="btn btn-warning btn-block" id="Cancel" data-dismiss="modal" value=@Localizer["Cancel"]>
            </div>

            <div class="form-group row" style="text-align: center">
                <span class="unhandled-error-span">@ViewData["UnhandledError"]</span>
            </div>
        </div>
    </fieldset>
</div>

<script type="text/template" id="qq-template-gallery">
    <div class="qq-uploader-selector qq-uploader qq-gallery" qq-drop-area-text="@Localizer["Drop"]">
        <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
        </div>
        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
            <span class="qq-upload-drop-area-text-selector"></span>
        </div>
        <div class="qq-upload-button-selector qq-upload-button">
            <div>@Localizer["Browse"]</div>
        </div>
        <span class="qq-drop-processing-selector qq-drop-processing">
            <span>@Localizer["Processing"]</span>
            <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
        </span>
        <ul class="qq-upload-list-selector qq-upload-list" role="region" aria-live="polite" aria-relevant="additions removals">
            <li>
                <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
                <div class="qq-progress-bar-container-selector qq-progress-bar-container">
                    <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                </div>
                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                <div class="qq-thumbnail-wrapper">
                    <img class="qq-thumbnail-selector" qq-max-size="120" qq-server-scale>
                </div>
                <button type="button" class="qq-upload-cancel-selector qq-upload-cancel">@Localizer["X"]</button>
                <button type="button" class="qq-upload-retry-selector qq-upload-retry">
                    <span class="qq-btn qq-retry-icon" aria-label="Retry"></span>
                    @Localizer["Retry"]
                </button>

                <div class="qq-file-info">
                    <div class="qq-file-name">
                        <span class="qq-upload-file-selector qq-upload-file"></span>
                        <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                    </div>
                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                    <span class="qq-upload-size-selector qq-upload-size"></span>
                    <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">
                        <span class="qq-btn qq-delete-icon" aria-label="Delete"></span>
                    </button>
                    <button type="button" class="qq-btn qq-upload-pause-selector qq-upload-pause">
                        <span class="qq-btn qq-pause-icon" aria-label="Pause"></span>
                    </button>
                    <button type="button" class="qq-btn qq-upload-continue-selector qq-upload-continue">
                        <span class="qq-btn qq-continue-icon" aria-label="Continue"></span>
                    </button>
                </div>
            </li>
        </ul>

        <dialog class="qq-alert-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">@Localizer["Close"]</button>
            </div>
        </dialog>

        <dialog class="qq-confirm-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">@Localizer["No"]</button>
                <button type="button" class="qq-ok-button-selector">@Localizer["Yes"]</button>
            </div>
        </dialog>

        <dialog class="qq-prompt-dialog-selector">
            <div class="qq-dialog-message-selector"></div>
            <input type="text">
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">@Localizer["Cancel"]</button>
                <button type="button" class="qq-ok-button-selector">@Localizer["Ok"]</button>
            </div>
        </dialog>
    </div>
</script>

<script src="~/lib/cropit/dist/jquery.cropit.js"></script>
<script src="~/lib/fine-uploader/dist/jquery.fine-uploader.js"></script>
<script src="~/js/modal.scripts.js"></script>

<script>
    function dataURItoBlob(dataURI) {
        var binary = atob(dataURI.split(',')[1]);
        var array = [];
        for (var i = 0; i < binary.length; i++) {
            array.push(binary.charCodeAt(i));
        }
        return new Blob([new Uint8Array(array)], { type: 'image/jpeg' });
    }

    $(function () {
        $('#image-cropper').cropit({
            smallImage: 'stretch'
        });
    });

    $("#SaveAvatar").click(function (evt) {
        var fileUpload = $("#file").get(0);
        var files = fileUpload.files;

        var data = new FormData();

        var imageData = $('#image-cropper').cropit('export', { type: 'image/jpeg', quality: 0.9 });
        data.append(files[0].name, dataURItoBlob(imageData));

        $.ajax({
            url: '@Url.Action("Avatar", "Pets", new { id = Model.Id })',
                type: "POST",
                data: data,
                contentType: false,
                processData: false,
                beforeSend: function ()
                {
                    $('#SaveAvatar').attr("disabled", true);
                },
                success: function (result)
                {
                    $('#myModal').modal('hide');
                    window.location.reload();
                }
            });

            evt.preventDefault();
    });

    $('#fine-uploader-gallery').fineUploader({
        template: 'qq-template-gallery',
        request: {
            endpoint: '@Url.Action("Gallery", "Pets", new { id = Model.Id })'
        },
        session: {
            endpoint: '@Url.Action("Gallery", "Pets", new { id = Model.Id })'
        },
        deleteFile: {
            enabled: true,
            forceConfirm: true,
            endpoint: '@Url.Action("GalleryDelete", "Pets", new { id = Model.Id })',
            confirmMessage: "Czy na pewno chcesz usunąć {filename}?",
            method: 'POST'
        },
        thumbnails: {
            placeholders: {
                waitingPath: 'lib/fine-uploader/dist/placeholders/waiting-generic.png',
                notAvailablePath: 'lib/fine-uploader/dist/placeholders/not_available-generic.png'
            }
        },
        cors: {
            expected: true,
            sendCredentials: true
        },
        validation: {
            allowedExtensions: ['jpeg', 'jpg', 'gif', 'png']
        }
    })
</script>
